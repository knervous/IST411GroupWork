#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Java

module Lang

  # (no documentation provided)
  class Number 


    # the json hash for this Number
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this Number
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Number with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a Number from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonElement 

    # (no documentation provided)
    attr_accessor :asBigInteger
    # (no documentation provided)
    attr_accessor :asCharacter
    # (no documentation provided)
    attr_accessor :asBoolean
    # (no documentation provided)
    attr_accessor :asInt
    # (no documentation provided)
    attr_accessor :jsonArray
    # (no documentation provided)
    attr_accessor :jsonObject
    # (no documentation provided)
    attr_accessor :asDouble
    # (no documentation provided)
    attr_accessor :asString
    # (no documentation provided)
    attr_accessor :asFloat
    # (no documentation provided)
    attr_accessor :asJsonPrimitive
    # (no documentation provided)
    attr_accessor :asJsonObject
    # (no documentation provided)
    attr_accessor :asJsonArray
    # (no documentation provided)
    attr_accessor :asByte
    # (no documentation provided)
    attr_accessor :asNumber
    # (no documentation provided)
    attr_accessor :jsonNull
    # (no documentation provided)
    attr_accessor :asLong
    # (no documentation provided)
    attr_accessor :asBigDecimal
    # (no documentation provided)
    attr_accessor :asShort
    # (no documentation provided)
    attr_accessor :jsonPrimitive
    # (no documentation provided)
    attr_accessor :asJsonNull

    # the json hash for this JsonElement
    def to_jaxb_json_hash
      _h = {}
      _h['asBigInteger'] = asBigInteger.to_jaxb_json_hash unless asBigInteger.nil?
      _h['asCharacter'] = asCharacter.to_jaxb_json_hash unless asCharacter.nil?
      _h['asBoolean'] = asBoolean.to_jaxb_json_hash unless asBoolean.nil?
      _h['asInt'] = asInt.to_jaxb_json_hash unless asInt.nil?
      _h['jsonArray'] = jsonArray.to_jaxb_json_hash unless jsonArray.nil?
      _h['jsonObject'] = jsonObject.to_jaxb_json_hash unless jsonObject.nil?
      _h['asDouble'] = asDouble.to_jaxb_json_hash unless asDouble.nil?
      _h['asString'] = asString.to_jaxb_json_hash unless asString.nil?
      _h['asFloat'] = asFloat.to_jaxb_json_hash unless asFloat.nil?
      _h['asJsonPrimitive'] = asJsonPrimitive.to_jaxb_json_hash unless asJsonPrimitive.nil?
      _h['asJsonObject'] = asJsonObject.to_jaxb_json_hash unless asJsonObject.nil?
      _h['asJsonArray'] = asJsonArray.to_jaxb_json_hash unless asJsonArray.nil?
      _h['asByte'] = asByte.to_jaxb_json_hash unless asByte.nil?
      _h['asNumber'] = asNumber.to_jaxb_json_hash unless asNumber.nil?
      _h['jsonNull'] = jsonNull.to_jaxb_json_hash unless jsonNull.nil?
      _h['asLong'] = asLong.to_jaxb_json_hash unless asLong.nil?
      _h['asBigDecimal'] = asBigDecimal.to_jaxb_json_hash unless asBigDecimal.nil?
      _h['asShort'] = asShort.to_jaxb_json_hash unless asShort.nil?
      _h['jsonPrimitive'] = jsonPrimitive.to_jaxb_json_hash unless jsonPrimitive.nil?
      _h['asJsonNull'] = asJsonNull.to_jaxb_json_hash unless asJsonNull.nil?
      return _h
    end

    # the json (string form) for this JsonElement
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this JsonElement with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['asBigInteger'].nil?
          _oa = _o['asBigInteger']
            if(_oa.is_a? Hash)
              @asBigInteger = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asBigInteger =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asBigInteger = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asBigInteger.push Bignum.from_json(_item)
                 else
                   @asBigInteger.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asBigInteger = _oa
            end
          end
        if !_o['asCharacter'].nil?
          _oa = _o['asCharacter']
            if(_oa.is_a? Hash)
              @asCharacter = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asCharacter =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asCharacter = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asCharacter.push Fixnum.from_json(_item)
                 else
                   @asCharacter.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asCharacter = _oa
            end
          end
        if !_o['asBoolean'].nil?
          _oa = _o['asBoolean']
            if(_oa.is_a? Hash)
              @asBoolean = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asBoolean =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asBoolean = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asBoolean.push Boolean.from_json(_item)
                 else
                   @asBoolean.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asBoolean = _oa
            end
          end
        if !_o['asInt'].nil?
          _oa = _o['asInt']
            if(_oa.is_a? Hash)
              @asInt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asInt =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asInt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asInt.push Fixnum.from_json(_item)
                 else
                   @asInt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asInt = _oa
            end
          end
        if !_o['jsonArray'].nil?
          _oa = _o['jsonArray']
            if(_oa.is_a? Hash)
              @jsonArray = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonArray =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonArray = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonArray.push Boolean.from_json(_item)
                 else
                   @jsonArray.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonArray = _oa
            end
          end
        if !_o['jsonObject'].nil?
          _oa = _o['jsonObject']
            if(_oa.is_a? Hash)
              @jsonObject = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonObject =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonObject = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonObject.push Boolean.from_json(_item)
                 else
                   @jsonObject.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonObject = _oa
            end
          end
        if !_o['asDouble'].nil?
          _oa = _o['asDouble']
            if(_oa.is_a? Hash)
              @asDouble = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asDouble =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asDouble = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asDouble.push Float.from_json(_item)
                 else
                   @asDouble.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asDouble = _oa
            end
          end
        if !_o['asString'].nil?
          _oa = _o['asString']
            if(_oa.is_a? Hash)
              @asString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asString.push String.from_json(_item)
                 else
                   @asString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asString = _oa
            end
          end
        if !_o['asFloat'].nil?
          _oa = _o['asFloat']
            if(_oa.is_a? Hash)
              @asFloat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asFloat =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asFloat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asFloat.push Float.from_json(_item)
                 else
                   @asFloat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asFloat = _oa
            end
          end
        if !_o['asJsonPrimitive'].nil?
          _oa = _o['asJsonPrimitive']
            if(_oa.is_a? Hash)
              @asJsonPrimitive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonPrimitive =  Com::Google::Gson::JsonPrimitive.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonPrimitive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonPrimitive.push Com::Google::Gson::JsonPrimitive.from_json(_item)
                 else
                   @asJsonPrimitive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonPrimitive = _oa
            end
          end
        if !_o['asJsonObject'].nil?
          _oa = _o['asJsonObject']
            if(_oa.is_a? Hash)
              @asJsonObject = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonObject =  Com::Google::Gson::JsonObject.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonObject = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonObject.push Com::Google::Gson::JsonObject.from_json(_item)
                 else
                   @asJsonObject.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonObject = _oa
            end
          end
        if !_o['asJsonArray'].nil?
          _oa = _o['asJsonArray']
            if(_oa.is_a? Hash)
              @asJsonArray = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonArray =  Com::Google::Gson::JsonArray.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonArray = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonArray.push Com::Google::Gson::JsonArray.from_json(_item)
                 else
                   @asJsonArray.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonArray = _oa
            end
          end
        if !_o['asByte'].nil?
          _oa = _o['asByte']
            if(_oa.is_a? Hash)
              @asByte = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asByte =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asByte = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asByte.push Fixnum.from_json(_item)
                 else
                   @asByte.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asByte = _oa
            end
          end
        if !_o['asNumber'].nil?
          _oa = _o['asNumber']
            if(_oa.is_a? Hash)
              @asNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asNumber =  Java::Lang::Number.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asNumber.push Java::Lang::Number.from_json(_item)
                 else
                   @asNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asNumber = _oa
            end
          end
        if !_o['jsonNull'].nil?
          _oa = _o['jsonNull']
            if(_oa.is_a? Hash)
              @jsonNull = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonNull =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonNull = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonNull.push Boolean.from_json(_item)
                 else
                   @jsonNull.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonNull = _oa
            end
          end
        if !_o['asLong'].nil?
          _oa = _o['asLong']
            if(_oa.is_a? Hash)
              @asLong = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asLong =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asLong = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asLong.push Bignum.from_json(_item)
                 else
                   @asLong.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asLong = _oa
            end
          end
        if !_o['asBigDecimal'].nil?
          _oa = _o['asBigDecimal']
            if(_oa.is_a? Hash)
              @asBigDecimal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asBigDecimal =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asBigDecimal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asBigDecimal.push Float.from_json(_item)
                 else
                   @asBigDecimal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asBigDecimal = _oa
            end
          end
        if !_o['asShort'].nil?
          _oa = _o['asShort']
            if(_oa.is_a? Hash)
              @asShort = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asShort =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asShort = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asShort.push Fixnum.from_json(_item)
                 else
                   @asShort.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asShort = _oa
            end
          end
        if !_o['jsonPrimitive'].nil?
          _oa = _o['jsonPrimitive']
            if(_oa.is_a? Hash)
              @jsonPrimitive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonPrimitive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonPrimitive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonPrimitive.push Boolean.from_json(_item)
                 else
                   @jsonPrimitive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonPrimitive = _oa
            end
          end
        if !_o['asJsonNull'].nil?
          _oa = _o['asJsonNull']
            if(_oa.is_a? Hash)
              @asJsonNull = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonNull =  Com::Google::Gson::JsonNull.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonNull = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonNull.push Com::Google::Gson::JsonNull.from_json(_item)
                 else
                   @asJsonNull.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonNull = _oa
            end
          end
    end

    # constructs a JsonElement from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonPrimitive < Com::Google::Gson::JsonElement 

    # (no documentation provided)
    attr_accessor :boolean
    # (no documentation provided)
    attr_accessor :number
    # (no documentation provided)
    attr_accessor :string

    # the json hash for this JsonPrimitive
    def to_jaxb_json_hash
      _h = super
      _h['boolean'] = boolean.to_jaxb_json_hash unless boolean.nil?
      _h['number'] = number.to_jaxb_json_hash unless number.nil?
      _h['string'] = string.to_jaxb_json_hash unless string.nil?
      return _h
    end

    #initializes this JsonPrimitive with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['boolean'].nil?
          _oa = _o['boolean']
            if(_oa.is_a? Hash)
              @boolean = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @boolean =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @boolean = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @boolean.push Boolean.from_json(_item)
                 else
                   @boolean.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @boolean = _oa
            end
          end
        if !_o['number'].nil?
          _oa = _o['number']
            if(_oa.is_a? Hash)
              @number = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @number =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @number = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @number.push Boolean.from_json(_item)
                 else
                   @number.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @number = _oa
            end
          end
        if !_o['string'].nil?
          _oa = _o['string']
            if(_oa.is_a? Hash)
              @string = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @string =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @string = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @string.push Boolean.from_json(_item)
                 else
                   @string.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @string = _oa
            end
          end
    end

    # constructs a JsonPrimitive from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonNull < Com::Google::Gson::JsonElement 


    # the json hash for this JsonNull
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this JsonNull with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a JsonNull from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonArray < Com::Google::Gson::JsonElement 


    # the json hash for this JsonArray
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this JsonArray with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a JsonArray from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonObject < Com::Google::Gson::JsonElement 


    # the json hash for this JsonObject
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this JsonObject with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a JsonObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonElement 

    # (no documentation provided)
    attr_accessor :asString
    # (no documentation provided)
    attr_accessor :asDouble
    # (no documentation provided)
    attr_accessor :asFloat
    # (no documentation provided)
    attr_accessor :asJsonNull
    # (no documentation provided)
    attr_accessor :jsonPrimitive
    # (no documentation provided)
    attr_accessor :asBoolean
    # (no documentation provided)
    attr_accessor :asNumber
    # (no documentation provided)
    attr_accessor :asJsonArray
    # (no documentation provided)
    attr_accessor :asLong
    # (no documentation provided)
    attr_accessor :jsonNull
    # (no documentation provided)
    attr_accessor :asJsonPrimitive
    # (no documentation provided)
    attr_accessor :asInt
    # (no documentation provided)
    attr_accessor :asByte
    # (no documentation provided)
    attr_accessor :asBigDecimal
    # (no documentation provided)
    attr_accessor :asShort
    # (no documentation provided)
    attr_accessor :asBigInteger
    # (no documentation provided)
    attr_accessor :jsonArray
    # (no documentation provided)
    attr_accessor :asJsonObject
    # (no documentation provided)
    attr_accessor :asCharacter
    # (no documentation provided)
    attr_accessor :jsonObject

    # the json hash for this JsonElement
    def to_jaxb_json_hash
      _h = {}
      _h['asString'] = asString.to_jaxb_json_hash unless asString.nil?
      _h['asDouble'] = asDouble.to_jaxb_json_hash unless asDouble.nil?
      _h['asFloat'] = asFloat.to_jaxb_json_hash unless asFloat.nil?
      _h['asJsonNull'] = asJsonNull.to_jaxb_json_hash unless asJsonNull.nil?
      _h['jsonPrimitive'] = jsonPrimitive.to_jaxb_json_hash unless jsonPrimitive.nil?
      _h['asBoolean'] = asBoolean.to_jaxb_json_hash unless asBoolean.nil?
      _h['asNumber'] = asNumber.to_jaxb_json_hash unless asNumber.nil?
      _h['asJsonArray'] = asJsonArray.to_jaxb_json_hash unless asJsonArray.nil?
      _h['asLong'] = asLong.to_jaxb_json_hash unless asLong.nil?
      _h['jsonNull'] = jsonNull.to_jaxb_json_hash unless jsonNull.nil?
      _h['asJsonPrimitive'] = asJsonPrimitive.to_jaxb_json_hash unless asJsonPrimitive.nil?
      _h['asInt'] = asInt.to_jaxb_json_hash unless asInt.nil?
      _h['asByte'] = asByte.to_jaxb_json_hash unless asByte.nil?
      _h['asBigDecimal'] = asBigDecimal.to_jaxb_json_hash unless asBigDecimal.nil?
      _h['asShort'] = asShort.to_jaxb_json_hash unless asShort.nil?
      _h['asBigInteger'] = asBigInteger.to_jaxb_json_hash unless asBigInteger.nil?
      _h['jsonArray'] = jsonArray.to_jaxb_json_hash unless jsonArray.nil?
      _h['asJsonObject'] = asJsonObject.to_jaxb_json_hash unless asJsonObject.nil?
      _h['asCharacter'] = asCharacter.to_jaxb_json_hash unless asCharacter.nil?
      _h['jsonObject'] = jsonObject.to_jaxb_json_hash unless jsonObject.nil?
      return _h
    end

    # the json (string form) for this JsonElement
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this JsonElement with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['asString'].nil?
          _oa = _o['asString']
            if(_oa.is_a? Hash)
              @asString = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asString =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asString = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asString.push String.from_json(_item)
                 else
                   @asString.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asString = _oa
            end
          end
        if !_o['asDouble'].nil?
          _oa = _o['asDouble']
            if(_oa.is_a? Hash)
              @asDouble = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asDouble =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asDouble = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asDouble.push Float.from_json(_item)
                 else
                   @asDouble.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asDouble = _oa
            end
          end
        if !_o['asFloat'].nil?
          _oa = _o['asFloat']
            if(_oa.is_a? Hash)
              @asFloat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asFloat =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asFloat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asFloat.push Float.from_json(_item)
                 else
                   @asFloat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asFloat = _oa
            end
          end
        if !_o['asJsonNull'].nil?
          _oa = _o['asJsonNull']
            if(_oa.is_a? Hash)
              @asJsonNull = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonNull =  Com::Google::Gson::JsonNull.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonNull = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonNull.push Com::Google::Gson::JsonNull.from_json(_item)
                 else
                   @asJsonNull.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonNull = _oa
            end
          end
        if !_o['jsonPrimitive'].nil?
          _oa = _o['jsonPrimitive']
            if(_oa.is_a? Hash)
              @jsonPrimitive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonPrimitive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonPrimitive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonPrimitive.push Boolean.from_json(_item)
                 else
                   @jsonPrimitive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonPrimitive = _oa
            end
          end
        if !_o['asBoolean'].nil?
          _oa = _o['asBoolean']
            if(_oa.is_a? Hash)
              @asBoolean = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asBoolean =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asBoolean = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asBoolean.push Boolean.from_json(_item)
                 else
                   @asBoolean.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asBoolean = _oa
            end
          end
        if !_o['asNumber'].nil?
          _oa = _o['asNumber']
            if(_oa.is_a? Hash)
              @asNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asNumber =  Java::Lang::Number.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asNumber.push Java::Lang::Number.from_json(_item)
                 else
                   @asNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asNumber = _oa
            end
          end
        if !_o['asJsonArray'].nil?
          _oa = _o['asJsonArray']
            if(_oa.is_a? Hash)
              @asJsonArray = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonArray =  Com::Google::Gson::JsonArray.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonArray = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonArray.push Com::Google::Gson::JsonArray.from_json(_item)
                 else
                   @asJsonArray.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonArray = _oa
            end
          end
        if !_o['asLong'].nil?
          _oa = _o['asLong']
            if(_oa.is_a? Hash)
              @asLong = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asLong =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asLong = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asLong.push Bignum.from_json(_item)
                 else
                   @asLong.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asLong = _oa
            end
          end
        if !_o['jsonNull'].nil?
          _oa = _o['jsonNull']
            if(_oa.is_a? Hash)
              @jsonNull = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonNull =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonNull = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonNull.push Boolean.from_json(_item)
                 else
                   @jsonNull.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonNull = _oa
            end
          end
        if !_o['asJsonPrimitive'].nil?
          _oa = _o['asJsonPrimitive']
            if(_oa.is_a? Hash)
              @asJsonPrimitive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonPrimitive =  Com::Google::Gson::JsonPrimitive.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonPrimitive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonPrimitive.push Com::Google::Gson::JsonPrimitive.from_json(_item)
                 else
                   @asJsonPrimitive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonPrimitive = _oa
            end
          end
        if !_o['asInt'].nil?
          _oa = _o['asInt']
            if(_oa.is_a? Hash)
              @asInt = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asInt =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asInt = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asInt.push Fixnum.from_json(_item)
                 else
                   @asInt.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asInt = _oa
            end
          end
        if !_o['asByte'].nil?
          _oa = _o['asByte']
            if(_oa.is_a? Hash)
              @asByte = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asByte =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asByte = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asByte.push Fixnum.from_json(_item)
                 else
                   @asByte.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asByte = _oa
            end
          end
        if !_o['asBigDecimal'].nil?
          _oa = _o['asBigDecimal']
            if(_oa.is_a? Hash)
              @asBigDecimal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asBigDecimal =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asBigDecimal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asBigDecimal.push Float.from_json(_item)
                 else
                   @asBigDecimal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asBigDecimal = _oa
            end
          end
        if !_o['asShort'].nil?
          _oa = _o['asShort']
            if(_oa.is_a? Hash)
              @asShort = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asShort =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asShort = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asShort.push Fixnum.from_json(_item)
                 else
                   @asShort.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asShort = _oa
            end
          end
        if !_o['asBigInteger'].nil?
          _oa = _o['asBigInteger']
            if(_oa.is_a? Hash)
              @asBigInteger = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asBigInteger =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asBigInteger = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asBigInteger.push Bignum.from_json(_item)
                 else
                   @asBigInteger.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asBigInteger = _oa
            end
          end
        if !_o['jsonArray'].nil?
          _oa = _o['jsonArray']
            if(_oa.is_a? Hash)
              @jsonArray = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonArray =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonArray = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonArray.push Boolean.from_json(_item)
                 else
                   @jsonArray.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonArray = _oa
            end
          end
        if !_o['asJsonObject'].nil?
          _oa = _o['asJsonObject']
            if(_oa.is_a? Hash)
              @asJsonObject = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asJsonObject =  Com::Google::Gson::JsonObject.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asJsonObject = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asJsonObject.push Com::Google::Gson::JsonObject.from_json(_item)
                 else
                   @asJsonObject.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asJsonObject = _oa
            end
          end
        if !_o['asCharacter'].nil?
          _oa = _o['asCharacter']
            if(_oa.is_a? Hash)
              @asCharacter = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @asCharacter =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @asCharacter = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @asCharacter.push Fixnum.from_json(_item)
                 else
                   @asCharacter.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @asCharacter = _oa
            end
          end
        if !_o['jsonObject'].nil?
          _oa = _o['jsonObject']
            if(_oa.is_a? Hash)
              @jsonObject = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonObject =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonObject = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonObject.push Boolean.from_json(_item)
                 else
                   @jsonObject.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonObject = _oa
            end
          end
    end

    # constructs a JsonElement from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonObject < Com::Google::Gson::JsonElement 


    # the json hash for this JsonObject
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this JsonObject with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a JsonObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonArray < Com::Google::Gson::JsonElement 


    # the json hash for this JsonArray
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this JsonArray with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a JsonArray from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonNull < Com::Google::Gson::JsonElement 


    # the json hash for this JsonNull
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this JsonNull with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a JsonNull from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Com

module Google

module Gson

  # (no documentation provided)
  class JsonPrimitive < Com::Google::Gson::JsonElement 

    # (no documentation provided)
    attr_accessor :string
    # (no documentation provided)
    attr_accessor :number
    # (no documentation provided)
    attr_accessor :boolean

    # the json hash for this JsonPrimitive
    def to_jaxb_json_hash
      _h = super
      _h['string'] = string.to_jaxb_json_hash unless string.nil?
      _h['number'] = number.to_jaxb_json_hash unless number.nil?
      _h['boolean'] = boolean.to_jaxb_json_hash unless boolean.nil?
      return _h
    end

    #initializes this JsonPrimitive with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['string'].nil?
          _oa = _o['string']
            if(_oa.is_a? Hash)
              @string = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @string =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @string = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @string.push Boolean.from_json(_item)
                 else
                   @string.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @string = _oa
            end
          end
        if !_o['number'].nil?
          _oa = _o['number']
            if(_oa.is_a? Hash)
              @number = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @number =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @number = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @number.push Boolean.from_json(_item)
                 else
                   @number.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @number = _oa
            end
          end
        if !_o['boolean'].nil?
          _oa = _o['boolean']
            if(_oa.is_a? Hash)
              @boolean = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @boolean =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @boolean = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @boolean.push Boolean.from_json(_item)
                 else
                   @boolean.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @boolean = _oa
            end
          end
    end

    # constructs a JsonPrimitive from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Java

module Lang

  # (no documentation provided)
  class Number 


    # the json hash for this Number
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this Number
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Number with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a Number from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end
